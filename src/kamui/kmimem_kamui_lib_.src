	.IMPORT _kmiPurgeCache
	.IMPORT _kmiMemCopy4
	.IMPORT _kmiDeviceExtension
	.IMPORT _kmiDMAtoTARequest
	.IMPORT _kmiWaitForFinishDMA
	.EXPORT _kmiCopyTextureToTexture
	.EXPORT _kmiWriteRegister
	.EXPORT _kmiReadRegister
	.EXPORT _kmiCopyToPVRMemory
	.EXPORT _kmiCopyFromPVRMemory
	.EXPORT _kmiCopyToFrameBuffer
	.EXPORT _kmiCopyFromFrameBuffer
	.EXPORT _kmiModuleInitialize
	.EXPORT _kmiRegisterPhIntHandler
	.EXPORT _kmiWriteRegisters
	.EXPORT _kmiPurgeMemory
	.SECTION PSG,CODE,ALIGN=32
_kmiModuleInitialize:
	rts
	nop
_kmiWriteRegister:
	mov.l lbl_00000080,R3
	add R3,R4
	mov.l R5,@R4
	rts
	mov #1,R0
_kmiPurgeMemory:
	mov.l R14,@-R15
	mov R4,R14
	mov.l R13,@-R15
	mov R4,R13
	mov.l R12,@-R15
	add R5,R13
	sts.l PR,@-R15
	mov.l lbl_00000084,R12
	cmp/hi R13,R14
	bt lbl_0000002C
lbl_00000022:
	jsr @R12
	mov R14,R4
	add #32,R14
	cmp/hi R13,R14
	bf lbl_00000022
lbl_0000002C:
	lds.l @R15+,PR
	mov.l @R15+,R12
	mov.l @R15+,R13
	rts
	mov.l @R15+,R14
_kmiReadRegister:
	mov.l lbl_00000080,R0
	rts
	mov.l @(R0,R4),R0
_kmiCopyToPVRMemory:
	sts.l PR,@-R15
	add #-4,R15
	mov.l lbl_0000008C,R2
	mov.l lbl_00000088,R3
	mov.l R4,@R15
	jsr @R2
	add R3,R4
	add #4,R15
	lds.l @R15+,PR
	rts
	mov #1,R0
_kmiCopyFromPVRMemory:
	sts.l PR,@-R15
	add #-4,R15
	mov.l lbl_0000008C,R2
	mov.l lbl_00000088,R3
	mov.l R5,@R15
	jsr @R2
	add R3,R5
	add #4,R15
	lds.l @R15+,PR
	rts
	mov #1,R0
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
lbl_00000080:
	.data.l h'A05F8000
lbl_00000084:
	.data.l _kmiPurgeCache
lbl_00000088:
	.data.l h'A5000000
lbl_0000008C:
	.data.l _kmiMemCopy4
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
_kmiCopyToFrameBuffer:
	mov.l R14,@-R15
	mov.l R13,@-R15
	mov.l R12,@-R15
	mov.l R11,@-R15
	mov.l R10,@-R15
	mov.l R9,@-R15
	mov.l R8,@-R15
	sts.l PR,@-R15
	add #-4,R15
	stc SR,R0
	mov R4,R12
	mov #31,R10
	mov R12,R3
	mov R6,R11
	shlr2 R0
	mov R5,R14
	shlr2 R0
	tst R10,R3
	and #15,R0
	bf/s lbl_00000160
	mov R0,R4
	mov R14,R1
	tst R10,R1
	bf lbl_00000160
	tst R4,R4
	bf lbl_00000160
	mov R11,R5
	bsr _kmiPurgeMemory
	mov R14,R4
	mov #-32,R13
	and R11,R13
	tst R13,R13
	bt lbl_00000108
	mov.l lbl_00000144,R8
	mov.w lbl_00000140,R9
	add R12,R8
lbl_000000E8:
	mov.l lbl_00000148,R3
	mov R15,R2
	mov R14,R5
	mov R13,R6
	mov.l R2,@-R15
	mov #24,R7
	jsr @R3
	mov R8,R4
	cmp/eq R9,R0
	bt/s lbl_000000E8
	add #4,R15
	mov.l @R15,R3
	mov.l lbl_0000014C,R1
	mov.l @R3,R2
	bra lbl_0000010E
	mov.l R2,@R1
lbl_00000108:
	mov.l lbl_0000014C,R3
	mov #0,R0
	mov.l R0,@R3
lbl_0000010E:
	mov R11,R6
	and R10,R6
	tst R6,R6
	bt lbl_00000124
	mov.l lbl_00000150,R4
	add R13,R14
	mov.l lbl_00000154,R3
	add R13,R12
	mov R14,R5
	jsr @R3
	add R12,R4
lbl_00000124:
	mov.l lbl_00000158,R2
	mov.l @R2,R0
	cmp/eq #1,R0
	bf lbl_0000016C
	mov.l lbl_0000015C,R3
	mov.l lbl_0000014C,R1
	jsr @R3
	mov.l @R1,R4
	bra lbl_0000016C
	nop
	nop
	nop
	nop
	nop
lbl_00000140:
	.data.w h'0100
	.data.w h'0000
lbl_00000144:
	.data.l h'11000000
lbl_00000148:
	.data.l _kmiDMAtoTARequest
lbl_0000014C:
	.data.l _kmiDeviceExtension+1072
lbl_00000150:
	.data.l h'A4000000
lbl_00000154:
	.data.l _kmiMemCopy4
lbl_00000158:
	.data.l _kmiDeviceExtension+1076
lbl_0000015C:
	.data.l _kmiWaitForFinishDMA
lbl_00000160:
	mov.l lbl_000001E0,R4
	mov R11,R6
	mov.l lbl_000001E4,R3
	mov R14,R5
	jsr @R3
	add R12,R4
lbl_0000016C:
	mov #1,R0
	add #4,R15
	lds.l @R15+,PR
	mov.l @R15+,R8
	mov.l @R15+,R9
	mov.l @R15+,R10
	mov.l @R15+,R11
	mov.l @R15+,R12
	mov.l @R15+,R13
	rts
	mov.l @R15+,R14
_kmiCopyFromFrameBuffer:
	sts.l PR,@-R15
	add #-12,R15
	mov.l lbl_000001E0,R3
	mov.l lbl_000001E4,R2
	mov.l R4,@R15
	mov.l R5,@(8,R15)
	mov.l R6,@(4,R15)
	mov.l @(8,R15),R5
	add R3,R5
	jsr @R2
	mov.l @R15,R4
	mov.l @(4,R15),R5
	bsr _kmiPurgeMemory
	mov.l @R15,R4
	add #12,R15
	lds.l @R15+,PR
	rts
	mov #1,R0
_kmiWriteRegisters:
	bra lbl_000001BE
	mov #0,R6
lbl_000001AA:
	mov R6,R1
	shll2 R1
	shll R1
	add R5,R1
	mov.l @R1,R0
	mov.l @(4,R1),R7
	mov.l lbl_000001E8,R1
	add R1,R0
	mov.l R7,@R0
	add #1,R6
lbl_000001BE:
	cmp/hs R4,R6
	bf lbl_000001AA
	rts
	nop
_kmiCopyTextureToTexture:
	rts
	mov #1,R0
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
lbl_000001E0:
	.data.l h'A4000000
lbl_000001E4:
	.data.l _kmiMemCopy4
lbl_000001E8:
	.data.l h'A05F8000
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
_kmiRegisterPhIntHandler:
	stc SR,R0
	mov.w lbl_00000260,R3
	shlr2 R0
	shlr2 R0
	and #15,R0
	mov R0,R5
	stc SR,R0
	and R3,R0
	or #240,R0
	ldc R0,SR
	stc VBR,R2
	mov.w lbl_00000262,R0
	mov.l lbl_00000264,R6
	mov.l R4,@(R0,R2)
	mov #0,R4
	mov.l R4,@R6
	mov.l lbl_00000268,R7
	mov.l R4,@R7
	mov.l lbl_0000026C,R3
	mov #-1,R4
	mov.l R4,@R3
	mov.l lbl_00000270,R2
	mov.l R4,@R2
	mov.l lbl_00000274,R1
	mov.l R1,@R6
	mov #14,R0
	mov.l R0,@R7
	stc SR,R1
	mov R5,R0
	mov.w lbl_00000260,R3
	and #15,R0
	shll2 R0
	and R3,R1
	shll2 R0
	or R1,R0
	ldc R0,SR
	rts
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
lbl_00000260:
	.data.w h'ff0f
lbl_00000262:
	.data.w h'0224
lbl_00000264:
	.data.l h'A05F6930
lbl_00000268:
	.data.l h'A05F6938
lbl_0000026C:
	.data.l h'A05F6900
lbl_00000270:
	.data.l h'A05F6908
lbl_00000274:
	.data.l h'002807EC
	.data.w h'0000
	.data.w h'0000
	.data.w h'0000
	.data.w h'0000
